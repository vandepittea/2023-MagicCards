@page "/"
@using Howest.MagicCards.Shared.DTO;
@using Howest.MagicCards.Shared.Filters;
@inject HttpClient HttpClient

<MainLayout>
    <div class="row">
        <div class="col-md-4">
            <CardFilterForm OnFilterChanged="FilterChanged" />
            <CardList Cards="@filteredCards" OnCardSelected="AddToDeck" />
        </div>
        <div class="col-md-8">
            <Deck DeckCards="@deckCards" OnCardRemoved="RemoveFromDeck" OnCardCountChanged="UpdateCardCount" OnClearDeck="ClearDeck" />
        </div>
    </div>
</MainLayout>

@code {
    private List<CardDto> cards = new List<CardDto>();
    private List<CardDto> filteredCards = new List<CardDto>();
    private List<CardInDeckDto> deckCards = new List<CardInDeckDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadCards();
    }

    private async Task LoadCards()
    {
        cards = await HttpClient.GetFromJsonAsync<List<Card>>("https://localhost:7103/api/v1.5/Cards");
        FilterCards();
    }

    private void FilterChanged(CardWebFilterV1_5 options)
    {
        // Apply filtering logic here
        FilterCards();
    }

    private void FilterCards()
    {
        // Apply filtering logic based on FilterOptions
        filteredCards = cards; // Placeholder logic, modify as needed
    }

    private void AddToDeck(CardDto card)
    {
        var deckCard = deckCards.FirstOrDefault(dc => dc > 1);
        if (deckCard != null)
        {
            
        }
        else
        {
            deckCard = new CardInDeckDto { Id = "3", Count = 1 };
            deckCards.Add(deckCard);
        }
    }

    private void RemoveFromDeck(CardInDeckDto deckCard)
    {
        if (1 > 0)
        {
           
        }
        else
        {
            deckCards.Remove(deckCard);
        }
    }

    private void UpdateCardCount(DeckCard deckCard, int count)
    {
        deckCard.Count = count;
    }

    private void ClearDeck()
    {
        deckCards.Clear();
    }
}