@page "/"
@inject IHttpClientFactory httpClientFactory
@using AutoMapper;
@using Howest.MagicCards.Shared.DTO
@using Howest.MagicCards.Shared.Filters
@using System.Net.Http
@using System.Net.Http.Json
@using Howest.MagicCards.Shared.Wrappers
@using System.Linq
@using System.Text.Json;
@using System.Text;

<div class="row">
    <div class="col-md-2">
        <CardFilter OnFilterChanged="@FilterChanged" />
    </div>
    <div class="col-md-7">
        <CardList Cards="@cards" />
    </div>
    <div class="col-md-3">
        <Deck />
    </div>
</div>

@code {
    private string error;
    private List<CardDto> cards = new List<CardDto>();
    private List<CardDetailDto> deckCards = new List<CardDetailDto>();
    private readonly JsonSerializerOptions jsonOptions;
    private HttpClient _httpCardClient;
    private HttpClient _httpDeckClient;
    private CardWebFilterV1_5 filter = new CardWebFilterV1_5();

    public Index()
    {
        jsonOptions = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    }

    protected override async Task OnInitializedAsync()
    {
        _httpCardClient = httpClientFactory.CreateClient("CardAPI");
        _httpDeckClient = httpClientFactory.CreateClient("DeckAPI");
        await LoadCards();
    }

    private async Task LoadCards()
    {
        try
        {
            string filterJson = JsonSerializer.Serialize(filter);
            HttpContent content = new StringContent(filterJson, Encoding.UTF8, "application/json");
            string uri = $"Cards?filter={Uri.EscapeDataString(filterJson)}";
            HttpResponseMessage response = await _httpCardClient.GetAsync(uri);
            string apiResponse = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                PagedResponse<IEnumerable<CardDto>> result = JsonSerializer.Deserialize<PagedResponse<IEnumerable<CardDto>>>(apiResponse, jsonOptions);
                cards = result.Data.ToList();
            }
            else
            {
                error = $"Error: {response.ReasonPhrase}";
                Console.WriteLine(error);
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            Console.WriteLine(error);
        }
    }

    private async Task FilterChanged(CardWebFilterV1_5 filter)
    {
        await LoadCards();
    }

    private async Task AddToDeck(CardInDeckDto cardInDeckDto)
    {
        HttpContent content = new StringContent(JsonSerializer.Serialize(cardInDeckDto), Encoding.UTF8, "application/json");

        HttpResponseMessage response = await _httpDeckClient.PostAsync("deck", content);

        if (response.StatusCode != System.Net.HttpStatusCode.Created)
        {
            error = "Adding card to deck failed.";
            Console.WriteLine(error);
        }
    }
}