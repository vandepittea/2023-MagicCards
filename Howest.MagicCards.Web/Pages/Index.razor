@page "/"
@inject IHttpClientFactory httpClientFactory
@using AutoMapper;
@using Howest.MagicCards.Shared.DTO
@using Howest.MagicCards.Shared.Filters
@using System.Net.Http
@using System.Net.Http.Json
@using Howest.MagicCards.Shared.Wrappers
@using System.Linq
@using System.Text.Json;
@using System.Text;

<div class="row">
    <div class="col-md-2">
        <CardFilter OnFilterChanged="@FilterChanged" />
    </div>
    <div class="col-md-7">
        <CardList Cards="@cards" />
    </div>
    <div class="col-md-3">
        <Deck />
    </div>
</div>

<div class="pagination">
    <button class="btn btn-primary" disabled="@IsFirstPage" @onclick="GoToPreviousPage">Previous</button>
    <button class="btn btn-primary" disabled="@IsLastPage" @onclick="GoToNextPage">Next</button>
</div>

@code {
    private string error;
    private List<CardDto> cards = new List<CardDto>();
    private List<CardDetailDto> deckCards = new List<CardDetailDto>();
    private readonly JsonSerializerOptions jsonOptions;
    private HttpClient _httpCardClient;
    private int pageSize = 10;
    private int pageNumber = 1;
    private bool IsFirstPage => pageNumber == 1;
    private bool IsLastPage => cards.Count < pageSize;

    public Index()
    {
        jsonOptions = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    }

    protected override async Task OnInitializedAsync()
    {
        _httpCardClient = httpClientFactory.CreateClient("CardAPI");
        await LoadCards();
    }

    private async Task LoadCards(CardWebFilterV1_5 filter = null)
    {
        try
        {
            string uri = $"Cards?PageNumber={pageNumber}&PageSize={pageSize}";

            Console.WriteLine(uri);

            if (filter != null)
            {
                var queryParameters = new List<string>();

                if (!string.IsNullOrEmpty(filter.SetName))
                    queryParameters.Add($"SetName={Uri.EscapeDataString(filter.SetName)}");

                if (!string.IsNullOrEmpty(filter.ArtistName))
                    queryParameters.Add($"ArtistName={Uri.EscapeDataString(filter.ArtistName)}");

                if (!string.IsNullOrEmpty(filter.RarityName))
                    queryParameters.Add($"RarityName={Uri.EscapeDataString(filter.RarityName)}");

                if (!string.IsNullOrEmpty(filter.TypeName))
                    queryParameters.Add($"TypeName={Uri.EscapeDataString(filter.TypeName)}");

                if (!string.IsNullOrEmpty(filter.CardName))
                    queryParameters.Add($"CardName={Uri.EscapeDataString(filter.CardName)}");

                if (!string.IsNullOrEmpty(filter.CardText))
                    queryParameters.Add($"CardText={Uri.EscapeDataString(filter.CardText)}");

                if (filter.SortBy == "desc")
                    queryParameters.Add($"SortBy={Uri.EscapeDataString(filter.SortBy)}");

                if (queryParameters.Any())
                    uri += string.Join("&", queryParameters);
            }

            HttpResponseMessage response = await _httpCardClient.GetAsync(uri);
            string apiResponse = await response.Content.ReadAsStringAsync();

            Console.WriteLine(response);

            if (response.IsSuccessStatusCode)
            {
                PagedResponse<IEnumerable<CardDto>> result = JsonSerializer.Deserialize<PagedResponse<IEnumerable<CardDto>>>(apiResponse, jsonOptions);
                cards = result.Data.ToList();
                Console.WriteLine(cards.Count);
            }
            else
            {
                error = $"Error: {response.ReasonPhrase}";
                Console.WriteLine(error);
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            Console.WriteLine(error);
        }
    }

    private async Task FilterChanged(CardWebFilterV1_5 filter)
    {
        await LoadCards(filter);
    }

    private async Task GoToPreviousPage()
    {
        if (!IsFirstPage)
        {
            pageNumber--;
            await LoadCards();
        }
    }

    private async Task GoToNextPage()
    {
        if (!IsLastPage)
        {
            pageNumber++;
            await LoadCards();
        }
    }
}