@page "/card/{id:int}"

@inject NavigationManager navigationManager
@inject CardService cardService

<h3>Card Detail</h3>

@if (cardService.Card == null || cardService.Error != null)
{
    <p>An error occurred: @cardService.Error</p>
}
else
{
    <main class="card">
        <div class="card-header">
            <h5>@cardService.Card.Name</h5>
            @if (!string.IsNullOrWhiteSpace(cardService.Card.SetName))
            {
                <span><strong>Set:</strong> @cardService.Card.SetName</span>
            }
        </div>
        <div class="card-body">
            @if (!string.IsNullOrWhiteSpace(cardService.Card.OriginalImageUrl))
            {
                <div class="card-image">
                    <img src="@cardService.Card.OriginalImageUrl" alt="@cardService.Card.Name" />
                    @if (!string.IsNullOrWhiteSpace(cardService.Card.Power))
                    {
                        <p class="power-container">
                            <span class="power-value">@cardService.Card.Power</span>
                        </p>
                    }
                </div>
            }
            <div class="card-info">
                <div>
                    <p><strong>Type:</strong> @cardService.Card.Type</p>
                    <p><strong>Rarity:</strong> @cardService.Card.RarityName</p>
                    @if (!string.IsNullOrWhiteSpace(cardService.Card.Toughness))
                    {
                        <p><strong>Toughness:</strong> @cardService.Card.Toughness</p>
                    }
                    <p><strong>Converted Mana Cost:</strong> @cardService.Card.ConvertedManaCost</p>
                    @if (cardService.Card.CardColors != null && cardService.Card.CardColors.Any())
                    {
                        <p><strong>Colors:</strong> @string.Join(", ", cardService.Card.CardColors)</p>
                    }
                </div>
                <div>
                    @if (!string.IsNullOrWhiteSpace(cardService.Card.ArtistName))
                    {
                        <p><strong>Artist:</strong> @cardService.Card.ArtistName</p>
                    }
                    @if (cardService.Card.CardTypes != null && cardService.Card.CardTypes.Any())
                    {
                        <p><strong>Card Types:</strong> @string.Join(", ", cardService.Card.CardTypes)</p>
                    }
                    @if (!string.IsNullOrWhiteSpace(cardService.Card.Flavor))
                    {
                        <p><strong>Flavor Text:</strong> @cardService.Card.Flavor</p>
                    }
                    @if (!string.IsNullOrWhiteSpace(cardService.Card.Layout))
                    {
                        <p><strong>Layout:</strong> @cardService.Card.Layout</p>
                    }
                    @if (!string.IsNullOrWhiteSpace(cardService.Card.Text))
                    {
                        <p><strong>Card Text:</strong> @cardService.Card.Text</p>
                    }
                </div>
            </div>
        </div>
    </main>

    <button class="btn btn-primary back-button" @onclick="GoBack">Back</button>
}

<style>
    .card {
        border: 1px solid #ccc;
        border-radius: 5px;
        padding: 3rem;
        margin-top: 3rem;
        background-color: #fff;
        box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.2);
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .card-body {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }

    .card-image {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 22rem;
    }

    .card-image img {
        max-width: 100%;
        height: auto;
        max-height: 100%;
    }

    .card-info {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 2rem;
    }

    .card-info p {
        margin: 0;
    }

    .card-info strong {
        font-weight: bold;
    }

    .power-container {
        position: relative;
    }

    .power-value {
        position: absolute;
        top: -9.2rem;
        right: 0.01rem;
        font-weight: bold;
        font-size: 1.5rem;
        background-color: #1b6ec2;
        color: #fff;
        padding: 1rem;
        border-radius: 4px;
    }

    .back-button {
        margin-top: 2rem;
        color: #fff;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
    }
</style>

@code {
    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await cardService.LoadCard(Id);
    }

    private void GoBack()
    {
        navigationManager.NavigateTo("/");
    }
}