@inject CardService cardService

@using Howest.MagicCards.Shared.Filters;
@using Howest.MagicCards.Web.Services;
@using System.ComponentModel.DataAnnotations

<EditForm Model="@filter" OnValidSubmit="@Filter">
    <DataAnnotationsValidator />

    <aside class="card filter-card">
        <div class="card-body">
            <h5 class="card-title">Card Filter</h5>

            <div class="form-group">
                <label for="setName">Set Name:</label>
                <InputText class="form-control" id="setName" @bind-Value="@filter.SetName" />
                <ValidationMessage For="@(() => filter.SetName)" />
            </div>

            <div class="form-group">
                <label for="artistName">Artist Name:</label>
                <InputText class="form-control" id="artistName" @bind-Value="@filter.ArtistName" />
                <ValidationMessage For="@(() => filter.ArtistName)" />
            </div>

            <div class="form-group">
                <label for="rarityName">Rarity Name:</label>
                <InputText class="form-control" id="rarityName" @bind-Value="@filter.RarityName" />
                <ValidationMessage For="@(() => filter.RarityName)" />
            </div>

            <div class="form-group">
                <label for="typeName">Type Name:</label>
                <InputText class="form-control" id="typeName" @bind-Value="@filter.TypeName" />
                <ValidationMessage For="@(() => filter.TypeName)" />
            </div>

            <div class="form-group">
                <label for="cardName">Card Name:</label>
                <InputText class="form-control" id="cardName" @bind-Value="@filter.CardName" />
                <ValidationMessage For="@(() => filter.CardName)" />
            </div>

            <div class="form-group">
                <label for="cardText">Card Text:</label>
                <InputText class="form-control" id="cardText" @bind-Value="@filter.CardText" />
                <ValidationMessage For="@(() => filter.CardText)" />
            </div>

            <div class="form-group">
                <label for="sortBy">Sort By:</label>
                <select class="form-control" id="sortBy" @bind="@filter.SortBy">
                    <option value="">Ascending</option>
                    <option value="desc">Descending</option>
                </select>
            </div>

            <button class="btn btn-primary filter-button" type="submit">Apply Filter</button>
        </div>
    </aside>
</EditForm>

<style>
    .filter-card {
        border: none;
        box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.2);
        padding: 1rem;
        background-color: #f8f9fa;
    }

    .filter-card .form-group {
        margin-bottom: 1rem;
    }

    .filter-card .form-control {
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
    }

    .filter-card .form-control:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .filter-card .filter-button {
        width: 100%;
    }
</style>

@code {
    [Parameter]
    public CardWebFilterV1_5 filter { get; set; }

    [Parameter]
    public EventCallback<CardWebFilterV1_5> FilterChanged { get; set; }

    private async Task Filter()
    {
        await cardService.LoadCards(filter);
        await FilterChanged.InvokeAsync(filter);
    }
}