@inject IHttpClientFactory httpClientFactory
@using Howest.MagicCards.Shared.DTO
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json;
@using System.Text;

<div class="card">
    <div class="card-body">
        <h5>Deck</h5>

        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Image</th>
                    <th>Count</th>
                </tr>
            </thead>
            <tbody>
                @if (DeckCards != null)
                {
                    @foreach (CardInDeckDto deckCard in DeckCards)
                    {
                        <tr>
                            <td>@GetCardNameById(deckCard.Id)</td>
                            <td>
                                <span class="card-count" @onclick="() => IncrementCount(deckCard)">+</span>
                                <span class="card-count">@deckCard.Count</span>
                                <span class="card-count" @onclick="() => DecrementCount(deckCard)">-</span>
                            </td>
                            <td><button class="btn btn-danger" @onclick="() => RemoveFromDeck(deckCard.Id)">Remove</button></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3">Deck is empty.</td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-danger" @onclick="ClearDeck">Clear Deck</button>
    </div>
</div>

<style>
    .card-count {
        display: inline-block;
        padding: 0.2rem 0.4rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.25rem;
        background-color: #e9ecef;
        color: #000;
        cursor: pointer;
        margin-right: 0.25rem;
    }

        .card-count:hover {
            background-color: #ccc;
        }
</style>

@code {
    public List<CardDetailDto> DeckCardsExtended { get; set; }
    public List<CardInDeckDto> DeckCards { get; set; }

    private HttpClient _httpDeckClient;
    private HttpClient _httpCardClient;
    private string error;
    private readonly JsonSerializerOptions jsonOptions;

    public Deck()
    {
        DeckCardsExtended = new List<CardDetailDto>();
        DeckCards = new List<CardInDeckDto>();
        jsonOptions = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
    }

    protected override async Task OnInitializedAsync()
    {
        _httpCardClient = httpClientFactory.CreateClient("CardAPI");
        _httpDeckClient = httpClientFactory.CreateClient("DeckAPI");

        await LoadCardDetails();
    }

    private async Task RemoveFromDeck(string cardId)
    {
        try
        {
            HttpResponseMessage response = await _httpDeckClient.DeleteAsync($"deck/{cardId}");
            response.EnsureSuccessStatusCode();
            string result = await response.Content.ReadAsStringAsync();

            await LoadCardDetails(); // Refresh deck cards
        }
        catch (Exception ex)
        {
            error = $"Error removing card from deck: {ex.Message}";
            Console.WriteLine(error);
        }
    }

    private async Task IncrementCount(CardInDeckDto cardInDeckDto)
    {
        int count = int.Parse(cardInDeckDto.Count);
        count++;
        cardInDeckDto.Count = count.ToString();

        await UpdateCardCount(cardInDeckDto);
    }

    private async Task DecrementCount(CardInDeckDto cardInDeckDto)
    {
        int count = int.Parse(cardInDeckDto.Count);
        if (count > 0)
        {
            count--;
            cardInDeckDto.Count = count.ToString();

            await UpdateCardCount(cardInDeckDto);
        }
    }

    private async Task UpdateCardCount(CardInDeckDto cardInDeckDto)
    {
        HttpContent content = new StringContent(JsonSerializer.Serialize(cardInDeckDto), Encoding.UTF8, "application/json");

        HttpResponseMessage response = await _httpDeckClient.PutAsync("deck", content);

        Console.WriteLine(response);

        if (response.StatusCode != System.Net.HttpStatusCode.Created)
        {
            error = "Updating card failed.";
            Console.WriteLine(error);
        }
        else
        {
            await LoadCardDetails();
        }
    }

    private async Task ClearDeck()
    {
        try
        {
            HttpResponseMessage response = await _httpDeckClient.DeleteAsync("deck/clear");
            response.EnsureSuccessStatusCode();
            string result = await response.Content.ReadAsStringAsync();

            await LoadCardDetails();
        }
        catch (Exception ex)
        {
            error = $"Error clearing deck: {ex.Message}";
            Console.WriteLine(error);
        }
    }

    private async Task LoadCardDetails()
    {
        try
        {
            DeckCards.Clear();
            DeckCardsExtended.Clear();

            HttpResponseMessage response = await _httpDeckClient.GetAsync("deck");
            string apiResponse = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                DeckCards = JsonSerializer.Deserialize<List<CardInDeckDto>>(apiResponse, jsonOptions);

                foreach (CardInDeckDto deckCard in DeckCards)
                {
                    HttpResponseMessage response2 = await _httpCardClient.GetAsync($"Cards/{deckCard.Id}");
                    string apiResponse2 = await response2.Content.ReadAsStringAsync();

                    if (response.IsSuccessStatusCode)
                    {
                        CardDetailDto card = JsonSerializer.Deserialize<CardDetailDto>(apiResponse2, jsonOptions);

                        DeckCardsExtended.Add(card);
                    }
                    else
                    {
                        error = $"Error: {response.ReasonPhrase}";
                        Console.WriteLine(error);
                    }
                }
            }
            else
            {
                error = $"Error: {response.ReasonPhrase}";
                Console.WriteLine(error);
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            Console.WriteLine(error);
        }
    }

    private string GetCardNameById(string cardId)
    {
        if (!long.TryParse(cardId, out long id))
        {
            return "Invalid card ID";
        }

        CardDetailDto card = DeckCardsExtended.SingleOrDefault(c => c.Id == id);
        Console.WriteLine(card);

        return card?.Name ?? "Card not found";
    }
}