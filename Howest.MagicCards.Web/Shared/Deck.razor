@inject DeckService deckService

@using Howest.MagicCards.Shared.DTO
@using System.Net.Http
@using System.Net.Http.Json
@using System.Text.Json;
@using System.Text;
@using Howest.MagicCards.Web.Services;

<aside class="card">
    <div class="card-body">
        <h5>Deck</h5>

        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Image</th>
                    <th>Count</th>
                </tr>
            </thead>
            <tbody>
                @if (deckService.DeckCards != null)
                {
                    @foreach (CardInDeckDto deckCard in deckService.DeckCards)
                    {
                        <tr>
                            <td>@GetCardNameById(deckCard.Id)</td>
                            <td>
                                <span class="card-count" @onclick="() => DecrementCount(deckCard)">-</span>
                                <span class="card-count">@deckCard.Count</span>
                                <span class="card-count" @onclick="() => IncrementCount(deckCard)">+</span>
                            </td>
                            <td><button class="btn btn-danger" @onclick="async () => await deckService.RemoveFromDeck(deckCard.Id)">Remove</button></td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3">Deck is empty.</td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-danger" @onclick="async () => await deckService.ClearDeck()">Clear Deck</button>
    </div>
</aside>

<style>
    .card-count {
        display: inline-block;
        padding: 0.2rem 0.4rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.25rem;
        background-color: #e9ecef;
        color: #000;
        cursor: pointer;
        margin-right: 0.25rem;
    }

    .card-count:hover {
        background-color: #ccc;
    }
</style>

@code {
    protected override async Task OnInitializedAsync()
    {
        await deckService.LoadDeck();
        deckService.DeckCardsChanged += OnDeckCardsChanged;
    }

    private async void OnDeckCardsChanged(object sender, EventArgs e)
    {
        await deckService.LoadDeck();
        StateHasChanged();
    }

    private async Task IncrementCount(CardInDeckDto cardInDeckDto)
    {
        int count = int.Parse(cardInDeckDto.Count);
        count++;
        cardInDeckDto.Count = count.ToString();

        await deckService.UpdateCardCount(cardInDeckDto);
        await deckService.LoadDeck();
    }

    private async Task DecrementCount(CardInDeckDto cardInDeckDto)
    {
        int count = int.Parse(cardInDeckDto.Count);
        count--;
        cardInDeckDto.Count = count.ToString();

        await deckService.UpdateCardCount(cardInDeckDto);
        await deckService.LoadDeck();
    }

    private string GetCardNameById(string cardId)
    {
        if (!long.TryParse(cardId, out long id))
        {
            return "Invalid card ID";
        }

        CardDetailDto card = deckService.DeckCardsExtended.FirstOrDefault(c => c.Id == id);

        return card?.Name ?? "Card not found";
    }
}